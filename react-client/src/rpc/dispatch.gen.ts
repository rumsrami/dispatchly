/* tslint:disable */
// dispatch 0.0.1 101fdf060091ac93b74d8620c25af822bc245a76
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.

// WebRPC description and code-gen version
export const WebRPCVersion = "v1"

// Schema version of your RIDL schema
export const WebRPCSchemaVersion = "0.0.1"

// Schema hash generated from your RIDL schema
export const WebRPCSchemaHash = "101fdf060091ac93b74d8620c25af822bc245a76"


//
// Types
//
export interface Admin {
  email: string
  password: string
}

export interface Version {
  webrpcVersion: string
  schemaVersion: string
  schemaHash: string
  appVersion: string
}

export interface GetScheduleRequest {
  driverName: string
  week: number
}

export interface GetScheduleResponse {
  schedule: {[key: number]: Array<Slot>}
}

export interface Slot {
  startHour: string
  taskSlot: Array<string>
}

export interface CreateTaskRequest {
  driverName: string
  operation: string
  week: number
  day: number
  duration: number
  startHour: string
  endHour: string
}

export interface DeleteTaskRequest {
  driverName: string
  week: number
  day: number
  startHour: string
}

export interface UpdateTaskRequest {
  driverName: string
  week: number
  day: number
  startHour: Array<string>
  newStartHour: string
  newEndHour: string
  newDuration: number
  newOperation: string
}

export interface Dispatch {
  ping(headers?: object): Promise<PingReturn>
  version(headers?: object): Promise<VersionReturn>
  readSchedule(args: ReadScheduleArgs, headers?: object): Promise<ReadScheduleReturn>
  createTask(args: CreateTaskArgs, headers?: object): Promise<CreateTaskReturn>
  deleteTask(args: DeleteTaskArgs, headers?: object): Promise<DeleteTaskReturn>
  updateTask(args: UpdateTaskArgs, headers?: object): Promise<UpdateTaskReturn>
}

export interface PingArgs {
}

export interface PingReturn {
  status: boolean  
}
export interface VersionArgs {
}

export interface VersionReturn {
  version: Version  
}
export interface ReadScheduleArgs {
  req: GetScheduleRequest
}

export interface ReadScheduleReturn {
  res: GetScheduleResponse  
}
export interface CreateTaskArgs {
  req: CreateTaskRequest
}

export interface CreateTaskReturn {
  res: boolean  
}
export interface DeleteTaskArgs {
  req: DeleteTaskRequest
}

export interface DeleteTaskReturn {
  res: boolean  
}
export interface UpdateTaskArgs {
  req: UpdateTaskRequest
}

export interface UpdateTaskReturn {
  res: boolean  
}


  
//
// Client
//
export class Dispatch implements Dispatch {
  private hostname: string
  private fetch: Fetch
  private path = '/rpc/Dispatch/'

  constructor(hostname: string, fetch: Fetch) {
    this.hostname = hostname
    this.fetch = fetch
  }

  private url(name: string): string {
    return this.hostname + this.path + name
  }
  
  ping = (headers?: object): Promise<PingReturn> => {
    return this.fetch(
      this.url('Ping'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          status: <boolean>(_data.status)
        }
      })
    })
  }
  
  version = (headers?: object): Promise<VersionReturn> => {
    return this.fetch(
      this.url('Version'),
      createHTTPRequest({}, headers)
      ).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          version: <Version>(_data.version)
        }
      })
    })
  }
  
  readSchedule = (args: ReadScheduleArgs, headers?: object): Promise<ReadScheduleReturn> => {
    return this.fetch(
      this.url('ReadSchedule'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          res: <GetScheduleResponse>(_data.res)
        }
      })
    })
  }
  
  createTask = (args: CreateTaskArgs, headers?: object): Promise<CreateTaskReturn> => {
    return this.fetch(
      this.url('CreateTask'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          res: <boolean>(_data.res)
        }
      })
    })
  }
  
  deleteTask = (args: DeleteTaskArgs, headers?: object): Promise<DeleteTaskReturn> => {
    return this.fetch(
      this.url('DeleteTask'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          res: <boolean>(_data.res)
        }
      })
    })
  }
  
  updateTask = (args: UpdateTaskArgs, headers?: object): Promise<UpdateTaskReturn> => {
    return this.fetch(
      this.url('UpdateTask'),
      createHTTPRequest(args, headers)).then((res) => {
      return buildResponse(res).then(_data => {
        return {
          res: <boolean>(_data.res)
        }
      })
    })
  }
  
}

  
export interface WebRPCError extends Error {
  code: string
  msg: string
	status: number
}

const createHTTPRequest = (body: object = {}, headers: object = {}): object => {
  return {
    method: 'POST',
    headers: { ...headers, 'Content-Type': 'application/json' },
    body: JSON.stringify(body || {})
  }
}

const buildResponse = (res: Response): Promise<any> => {
  return res.text().then(text => {
    let data
    try {
      data = JSON.parse(text)
    } catch(err) {
      throw { code: 'unknown', msg: `expecting JSON, got: ${text}`, status: res.status } as WebRPCError
    }
    if (!res.ok) {
      throw data // webrpc error response
    }
    return data
  })
}

export type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>
